c----------------------------------------------------------------------
      subroutine place_particles
c
c     Place particles in this routine, also called for injection
c
      include 'SIZE'
      include 'TOTAL'
      include 'CMTDATA'
      include 'CMTPART'

      real    dum

      integer icalld
      save    icalld
      data    icalld  /-1/

      real   xdrange(2,3)
      common /domainrange/ xdrange
      real   xerange(2,3,lelt)
      common /elementrange/ xerange

      ! begin timer
      ptdum(3) = dnekclock()

      icalld = icalld + 1

      rpi    = 4.0*atan(1.) ! pi
      mu_0   = abs(param(2))

c     bounds to distribute particle between
      rxbo(1,1) = xdrange(1,1) + dp(2)/2.
      rxbo(2,1) = xdrange(2,1) - dp(2)/2.
      rxbo(1,2) = xdrange(1,2) + dp(2)/2.
      rxbo(2,2) = xdrange(2,2) - dp(2)/2.
      rxbo(1,3) = xdrange(1,3) + dp(2)/2.
      rxbo(2,3) = xdrange(2,3) - dp(2)/2.

      vol_distrib = (rxbo(2,1)-rxbo(1,1))*(rxbo(2,2)-rxbo(1,2))*
     >              (rxbo(2,3)-rxbo(1,3))

      if (ipart_restartr .eq. 0) then

c     correct nwe if discrepancy
      nwe         = int(nw/np)                ! num. part per proc
      nw_tmp      = iglsum(nwe,1)
      if ((nw_tmp .ne. nw) .and. (nid.eq.0)) nwe = nwe + (nw - nw_tmp)
c     nwe = 0
c     if (nid .eq. 0) nwe = nw

c     main loop to distribute particles
      do i = 1,nwe
         n = n + 1
         if (n.gt.llpart)then 
            write(6,*)'Not enough space to store more particles'
            call exitt
         endif

         ! distribute x,y,z coordinates
         do j=0,2
            rval = unif_random(rxbo(1,j+1),rxbo(2,j+1))
            rpart(jx+j,n)  = rval
            rpart(jx1+j,n) = rval
            rpart(jx2+j,n) = rval
            rpart(jx3+j,n) = rval
         enddo

c        set some rpart values for later use
         rpart(jdp,n)   = unif_random(dp(1),dp(2)) ! particle diameter
         tau_p          = rpart(jdp,n)**2*rho_p/18.0d+0/mu_0  ! part. time scale stokes

         rpart(jtaup,n) = tau_p     ! particle time scale
         rpart(jrhop,n) = rho_p     ! material density of particle
         rpart(jvol,n)  = rpi*rpart(jdp,n)**3/6.! particle volume
         rpart(jspl,n)  = 1.        ! super particle loading
         rpart(jgam,n)  = 1.        ! initial integration correction

         rpart(jtemp,n)  = tp_0     ! intial temp as fluid air
         rpart(jtempf,n) = tp_0     ! intial temp as fluid air
         rpart(jrho,n)   = param(1) ! later overwritten by interpolation

c        set global particle id (3 part tag)
         ipart(jpid1,n) = nid 
         ipart(jpid2,n) = i
         ipart(jpid3,n) = icalld
      enddo

c     if (nitspl.gt.0) then
c        rspl = 15.
c        do i=1,n
c           rpart(jspl,i) = rspl
c        enddo
c     endif

c     check if zstart and zlen is alright for a 2d case
      if (.not. if3d) then
          if (abs(zstart-1.0) .gt. 1E-16) then
             write(6,*)'***particle zstart is not right for 2d case'
             call exitt
          elseif(abs(zlen) .gt. 1E-16) then
             write(6,*)'***particle zlen is not right for 2d case'
             call exitt
         endif
      endif

c     call remove_overlap_parts

      else
         call read_parallel_restart_part
      endif

      ! end timer
      pttime(3) = pttime(3) + dnekclock() - ptdum(3)
      return
      end
c-----------------------------------------------------------------------
      subroutine usr_particles_f_user(ii,jj)
c
c     extra body forces (total force, must have mass here)
c
      include 'SIZE'
      include 'TOTAL'
      include 'CMTDATA'
      include 'CMTPART'

      real pmass,pmassf

      pmass = rpart(jvol,ii)*rpart(jrhop,ii)
      pmassf= rpart(jvol,ii)*rpart(jrho,ii)

      if (jj.eq.0) rpart(jfusr+jj,ii) = 0.0 
      if (jj.eq.1) rpart(jfusr+jj,ii) = 0.0
      if (jj.eq.2) rpart(jfusr+jj,ii) = 0.0

      if (jj.eq.0) then
         rpart(jfusr+jj,ii) = -9.8*(pmass - pmassf)
      endif

      return
      end
c----------------------------------------------------------------------
      subroutine pre_sim_collisions
c
c     time stepping routine for pre-simulation collisions/settling
c
      include 'SIZE'
      include 'TOTAL'
      include 'CTIMER'
      include 'CMTDATA'
      include 'CMTPART'


      ! NOTE WE ARE SKIPPING SINCE WE HAVE ALREADY INITIALIZED
c     goto 1234

      nmax_step = 30000  ! number of pre-iteration steps
      nmax_add  = 30001  ! quit injecting particles after this step
      ninj      = 30000  ! injection rate step

      rtime = 0.
      ! pre simulation iteration for packed bed
      do i=1,nmax_step

         if (nid.eq. 0) write(6,*) 'pre-sim_io time',i,rtime
         if(mod(i,iostep).eq.0) then
            call usr_particles_io
         endif


         do stage=1,3

            if (stage .eq. 1) then
               call set_dt_particles(rdt_part)
               dt_cmt = rdt_part
               dt     = dt_cmt
               rtime = rtime + dt_cmt
               call set_tstep_coef_part(rdt_part)

               if(mod(i+1,ninj).eq.0) then
               if (i.lt.nmax_add) then
                  n_tot = iglsum(n,1)
                  if (n_tot .lt. nw) call place_particles
               endif
               endif

               call update_particle_location
               call move_particles_inproc

               if (two_way.gt.1) then
                  call particles_solver_nearest_neighbor
                  call spread_props_grid
               endif
            endif

            call usr_particles_forcing ! at most only qs,user,col here
            call rk3_integrate


         enddo

      enddo

 1234 continue

      return
      end
c----------------------------------------------------------------------
      subroutine remove_overlap_parts
      include 'SIZE'
      include 'TOTAL'
      include 'CMTDATA'
      include 'CMTPART'

      real    pdsit,rxwall(3)
      integer in_part(llpart)

      real   xdrange(2,3)
      common /domainrange/ xdrange

      ! first search local particles

      nlow  = n - nwe
      nhigh = n

      do j=1,n
         in_part(j) = 0
      enddo

c     let every particle search for itself
      do i = nlow,nhigh

c        particles in local elements
         do j = nlow,nhigh
            if (i .ne. j) then
               rdp1 = (6.*rpart(jspl,i)*rpart(jvol,i)/pi)**(1./3.)
               rdp2 = (6.*rpart(jspl,j)*rpart(jvol,j)/pi)**(1./3.)
               rdeff = 0.5*(rdp1 + rdp2)
               rdeff = 1.200*rdeff
               pdist = abs(rpart(jx,i)-rpart(jx,j))**2  
     >                          + abs(rpart(jy,i)-rpart(jy,j))**2
     >                          + abs(rpart(jz,i)-rpart(jz,j))**2
               pdist = sqrt(pdist)
               if (pdist .gt. rdeff) goto 1109
               ! remove here!
               in_part(i) = -1
               in_part(j) = -1
            endif
 1109        continue
         enddo

      enddo

      do i = nlow,nhigh
         do j = 1,6
            if (bc_part(j) .eq. -1) then
               nj1 = mod(j,2)
               if (nj1.ne.0) nj1 = 1
               if (nj1.eq.0) nj1 = 2
               nj2 = int((j-1)/2) + 1

               rxwall(1)   = rpart(jx  ,i)
               rxwall(2)   = rpart(jx+1,i)
               rxwall(3)   = rpart(jx+2,i)
               rxwall(nj2) = xdrange(nj1,nj2) ! wall loc

               rdp1 = (6.*rpart(jspl,i)*rpart(jvol,i)/pi)**(1./3.)
               rdeff  = rdp1
               rdeff = 1.200*rdeff
               pdist = abs(rpart(jx,i)-rxwall(1))**2  
     >                          + abs(rpart(jy,i)-rxwall(2))**2
     >                          + abs(rpart(jz,i)-rxwall(3))**2
               pdist = sqrt(pdist)
               if (pdist .gt. rdeff) goto 1108
               ! remove here!
               in_part(i) = -1
            endif
 1108 continue
         enddo
      enddo

      ic = 0
      do i=1,n
         if (in_part(i).eq.0) then
            ic = ic + 1 
            if (i .ne. ic) then
               call copy(rpart(1,ic),rpart(1,i),nr)
               call icopy(ipart(1,ic),ipart(1,i),ni)
            endif
         endif
      enddo
      n = ic

      return
      end
c----------------------------------------------------------------------
